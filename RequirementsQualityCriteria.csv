ID,Source,Status,Name,Quality criteria,Atomic,Relevant
QC_1,BaBOK_3,Open,Versioned,"A requirement shall be version controlled to avoid conflicting, concurrent changes and be able to revert in case of failure.",Multiple criteria within the quality criteria,
QC_33,BaBOK_3,Open,,self-contained and capable of being understood independently of other requirements or designs.,,
QC_2,BaBOK_3,Open,Complete,"enough to guide further work and at the appropriate level of detail for work to continue. The level of completeness required differs based on perspective or methodology, as well as the point in the life cycle where the requirement is being examined or represented.",Multiple criteria within the quality criteria,
QC_3,BaBOK_3,Open,Consistent,aligned with the identified needs of the stakeholders and not conflicting with other requirements.,Multiple criteria within the quality criteria,
QC_4,BaBOK_3,Open,Concise,contains no extraneous and unnecessary content.,Multiple criteria within the quality criteria,
QC_5,BaBOK_3,Open,Feasible,"reasonable and possible within the agreed-upon risk, schedule, and budget, or considered feasible enough to investigate further through experiments or prototypes.",Multiple criteria within the quality criteria,
QC_6,BaBOK_3,Open,Unambiguous,the requirement must be clearly stated in such a way to make it clear whether a solution does or does not meet the associated need.,,
QC_7,BaBOK_3,Open,Testable,able to verify that the requirement or design has been fulfilled. Acceptable levels of verifying fulfillment depend on the level of abstraction of the requirement or design.,,
QC_8,BaBOK_3,Open,Prioritized,"ranked, grouped, or negotiated in terms of importance and value against all other requirements.",,
QC_9,BaBOK_3,Open,Understandable,represented using common terminology of the audience.,,
QC_10,IREB_1.1.0,Open,Adequate,the requirement describes true and agreed stakeholder needs.,Multiple criteria within the quality criteria,
QC_11,IREB_1.1.0,Open,Necessary,"the requirement is part of the relevant system scope, meaning that it will contribute to the achievement of at least one stakeholder goal or need.",Multiple criteria within the quality criteria,
QC_12,IREB_1.1.0,Open,Unambiguous,"there is a true shared understanding of the requirement, meaning that everybody involved interprets it in the same way.",,
QC_13,IREB_1.1.0,Open,Complete,"the requirement is self-contained, meaning that no parts necessary for understanding it are missing.",,
QC_14,IREB_1.1.0,Open,Understandable,"the requirement is comprehensible to the target audience, meaning that the target audience can fully understand the requirement.",,
QC_15,IREB_1.1.0,Open,Verifiable,the fulfillment of the requirement by an implemented system can be checked indisputably (so that stakeholders or customers can decide whether or not a requirement is fulfilled by the implemented system).,,
QC_16,IREB_1.1.0,Open,Consistent,"no two requirements, recorded in a single work product or in different work products, contradict each other.",,
QC_17,IREB_1.1.0,Open,Non-redundant,each requirement is documented only once and does not overlap with another requirement.,Multiple criteria within the quality criteria,
QC_18,IREB_1.1.0,Open,Complete,"the work product contains all relevant requirements (functional requirements, quality requirements, and constraints) that are known at this point in time and that are related to this work product.",,Not relevant as requirements quality criteria
QC_19,IREB_1.1.0,Open,Modifiable,the work product is set up in such a way that it can be modified without degrading its quality.,,Not relevant as requirements quality criteria
QC_20,IREB_1.1.0,Open,Traceable,"the requirements in the work product can be traced back to their origins, forward to their implementation (in design, code, and test), and to other requirements they depend on.",Multiple criteria within the quality criteria,
QC_21,IREB_1.1.0,Open,Conformant,"if there are mandatory structuring or formatting instructions, the work product must conform to them.",,
QC_22,WiegersBeatty_2013,Open,Complete,"Each requirement must contain all the information necessary for the reader to understand it. In the case of functional requirements, this means providing the information the developer needs to be able to implement it correctly. If you know you’re lacking certain information, use TBD (to be determined) as a standard flag to highlight these gaps, or log them in an issue-tracking system to follow up on later. Resolve all TBDs in each portion of the requirements before the developers proceed with construction of that portion.",Multiple criteria within the quality criteria,
QC_23,WiegersBeatty_2013,Open,Correct,"Each requirement must accurately describe a capability that will meet some stakeholder’s need and must clearly describe the functionality to be built. You’ll have to go to the source of the requirement to check its correctness. This might be a user who supplied the initial requirement, a higher-level system requirement, a use case, a business rule, or another document. A low-level requirement that conflicts with its parent is not correct. To assess the correctness of user requirements, user representatives or their close surrogates should review them.",Multiple criteria within the quality criteria,
QC_24,WiegersBeatty_2013,Open,Feasible,"It must be possible to implement each requirement within the known capabilities and limitations of the system and its operating environment, as well as within project constraints of time, budget, and staff. A developer who participates during elicitation can provide a reality check on what can and cannot be done technically and what can be done only at excessive cost or effort. Incremental development approaches and proof-of-concept prototypes are two ways to evaluate requirement feasibility. If a requirement needs to be cut because it is not be feasible, understand the impact on the project vision and scope.",,
QC_25,WiegersBeatty_2013,Open,Necessary,"Each requirement should describe a capability that provides stakeholders with the anticipated business value, differentiates the product in the marketplace, or is required for conformance to an external standard, policy, or regulation. Every requirement should originate from a source that has the  authority to provide requirements. Trace functional and nonfunctional requirements back to specific voice-of-the-user input, such as a use case or user story. You should be able to relate each requirement to a business objective that clearly indicates why it’s necessary. If someone asks why a particular requirement is included, there should be a good answer.",Multiple criteria within the quality criteria,
QC_26,WiegersBeatty_2013,Open,Prioritized,"Prioritize business requirements according to which are most important to achieving the desired value. Assign an implementation priority to each functional requirement, user requirement, use case flow, or feature to indicate how essential it is to a particular product release. If all requirements are equally important, the project manager doesn’t know how best to respond to schedule overruns, personnel losses, or new requirements that come along. Requirements prioritization should be a collaborative activity involving multiple stakeholder perspectives.",,
QC_27,WiegersBeatty_2013,Open,Unambiguous,"Natural language is prone to two types of ambiguity. One type I can spot myself, when I can think of more than one way to interpret a given requirement. The other type of ambiguity is harder to catch. That’s when different people read the requirement and come up with different interpretations of it. The requirement makes sense to each of them but means something different to each of them. Inspections are a good way to spot ambiguities (Wiegers 2002). A formal peer review such as an inspection (as opposed to just passing out the requirements to individuals to examine on their own) provides an opportunity for each participant to compare his understanding of each requirement to someone else’s. “Comprehensible” is related to “unambiguous”: readers must understand what each requirement is saying. Chapter 17 describes the software peer review process. You’ll never remove all the ambiguity from requirements—that’s the nature of human language. Most of the time, reasonable people can draw the right conclusions from even a slightly fuzzy requirement. Getting a little help from your colleagues through reviews will clean up a lot of the worst issues, though.",,
QC_28,WiegersBeatty_2013,Open,Verifiable,"Can a tester devise tests or other verification approaches to determine whether each requirement is properly implemented? If a requirement isn’t verifiable, deciding whether it was correctly implemented becomes a matter of opinion, not objective analysis. Requirements that are incomplete, inconsistent, infeasible, or ambiguous are also unverifiable. Testers are good at examining requirements for verifiability. Include them in your requirements peer reviews to catch problems early.",,
QC_29,WiegersBeatty_2013,Open,Complete,"No requirement or necessary information should be absent. In practice, you’ll never document every single requirement for any system. There are always some assumed or implied requirements, although they carry more risk than explicitly stated requirements. Missing requirements are hard to spot because they aren’t there! The section “Avoiding incompleteness” later in this chapter suggests some ways to identify missing requirements. Any specification that contains TBDs is incomplete.",,Not relevant as requirements quality criteria
QC_30,WiegersBeatty_2013,Open,Consistent,"Consistent requirements don’t conflict with other requirements of the same type or with higher-level business, user, or system requirements. If you don’t resolve contradictions between requirements before diving into construction, the developers will have to deal with them. Recording the originator of each requirement lets you know who to talk to if you discover conflicts. It can be hard to spot inconsistencies when related information is stored in different locations, such as in a vision and scope document and in a requirements management tool.",Multiple criteria within the quality criteria,
QC_31,WiegersBeatty_2013,Open,Modifiable,"You can always rewrite a requirement, but you should maintain a history of changes made to each requirement, especially after they are baselined. You also need to know about connections and dependencies between requirements so you can find all the ones that must be changed together. Modifiability dictates that each requirement be uniquely labeled and expressed separately from others so you can refer to it unambiguously.",Multiple criteria within the quality criteria,
QC_32,WiegersBeatty_2013,Open,Traceable,"A traceable requirement can be linked both backward to its origin and forward to derived requirements, design elements, code that implements it, and tests that verify its implementation. Note that you don’t actually have to define all of these trace links for a requirement to have the properties that make it traceable. Traceable requirements are uniquely labeled with persistent identifiers. They are written in a structured, fine-grained way, not in long narrative paragraphs. Avoid combining multiple requirements together into a single statement, because the different requirements might trace to different development components.",Multiple criteria within the quality criteria,
